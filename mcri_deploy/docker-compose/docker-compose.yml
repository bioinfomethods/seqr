version: "3.4"

services:
  postgres:
    image: ${CONTAINER_REGISTRY:-asia.gcr.io/mcri-01}/${POSTGRES_IMAGE_NAME:-mcri-seqr-postgres}:${POSTGRES_IMAGE_TAG:-13.11}
    ports:
      - ${POSTGRES_SERVICE_PORT:-5433}:${POSTGRES_SERVICE_PORT:-5433}
    environment:
      - PGPORT=${POSTGRES_SERVICE_PORT:-5433}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-docker-compose-postgres-password}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -h postgres -U postgres
      interval: 5s
      timeout: 10s
      retries: 100

  redis:
    image: ${CONTAINER_REGISTRY:-asia.gcr.io/mcri-01}/${REDIS_IMAGE_NAME:-mcri-seqr-redis}:${REDIS_IMAGE_TAG:-latest}
    ports:
      - "0.0.0.0:${SEQR_REDIS_PORT:-6379}:6379"
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 5s
      retries: 100

  redis-cache-obs:
    profiles:
        - "cache"
    image: ${CONTAINER_REGISTRY:-asia.gcr.io/mcri-01}/${REDIS_CACHE_OBS_IMAGE_NAME:-mcri-redis-cache-obs}:${REDIS_CACHE_OBS_IMAGE_TAG:-latest}
#    volumes:
#      - ../../../tmp:/opt/tmp
    depends_on:
        - redis

  kibana:
    image: docker.elastic.co/kibana/${KIBANA_IMAGE_NAME:-kibana}:${KIBANA_IMAGE_TAG:-latest}
    environment:
      - ELASTICSEARCH_SERVICE_HOSTNAME=${ELASTICSEARCH_SERVICE_HOSTNAME:-host.docker.internal}
      - ELASTICSEARCH_SERVICE_PORT=${ELASTICSEARCH_SERVICE_PORT:-9200}
      - ELASTICSEARCH_HOSTS="http://${ELASTICSEARCH_SERVICE_HOSTNAME:-host.docker.internal}:${ELASTICSEARCH_SERVICE_PORT:-9200}"
    healthcheck:
      test: bash -c "curl -s -L kibana:5601 | grep kibana"
      interval: 3s
      timeout: 5s
      retries: 100

  seqr:
    image: ${CONTAINER_REGISTRY:-asia.gcr.io/mcri-01}/${SEQR_IMAGE_NAME:-mcri-seqr}:${SEQR_IMAGE_TAG:-latest}
    ports:
      - ${SEQR_SERVICE_PORT:-80}:8000
    environment:
      - DEPLOYMENT_TYPE=${DEPLOYMENT_TYPE:-prod}
      - SEQR_PRIVACY_VERSION=${SEQR_PRIVACY_VERSION:--1.00}
      - SEQR_TOS_VERSION=${SEQR_TOS_VERSION:--1.00}
      - PYTHONPATH=/seqr
      - BASE_URL=${BASE_URL:?err}
      - EMAIL_BACKEND=${EMAIL_BACKEND:-django.core.mail.backends.console.EmailBackend}
      - SMTP_EMAIL_HOST=${SMTP_EMAIL_HOST:-host.docker.internal}
      - SMTP_EMAIL_PORT=${SMTP_EMAIL_PORT:-25}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-seqr@seqr.mcri.edu.au}
      - STATIC_MEDIA_DIR=/seqr_static_files
      - POSTGRES_SERVICE_HOSTNAME=postgres
      - POSTGRES_SERVICE_PORT=${POSTGRES_SERVICE_PORT:-5433}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-docker-compose-postgres-password}
      - ELASTICSEARCH_SERVICE_HOSTNAME=${ELASTICSEARCH_SERVICE_HOSTNAME:-host.docker.internal}
      - ELASTICSEARCH_SERVICE_PORT=${ELASTICSEARCH_SERVICE_PORT:-9200}
      - REDIS_SERVICE_HOSTNAME=redis
      - KIBANA_SERVICE_HOSTNAME=kibana
      - PGHOST=postgres
      - PGPORT=${POSTGRES_SERVICE_PORT:-5433}
      - PGUSER=postgres
      - GUNICORN_WORKER_THREADS=4
      - SOCIAL_AUTH_GOOGLE_OAUTH2_CLIENT_ID=${SOCIAL_AUTH_GOOGLE_OAUTH2_CLIENT_ID}
      - SOCIAL_AUTH_PROVIDER=${SOCIAL_AUTH_PROVIDER:-keycloak}
      - SOCIAL_AUTH_API_URL=${SOCIAL_AUTH_API_URL:-https://keycloak.mcri.edu.au:8888/realms/bioinfomethods-test}
      - SOCIAL_AUTH_CLIENT_ID=${SOCIAL_AUTH_CLIENT_ID:-archietest}
      - SOCIAL_AUTH_CLIENT_SECRET=${SOCIAL_AUTH_CLIENT_SECRET:-keycloak-client-secret}
      - SOCIAL_AUTH_KEYCLOAK_PUBLIC_KEY=${SOCIAL_AUTH_KEYCLOAK_PUBLIC_KEY:-keycloak-public-key}
      - ANALYST_USER_GROUP=${ANALYST_USER_GROUP:-analysts}
      - ANALYST_PROJECT_CATEGORY=${ANALYST_PROJECT_CATEGORY:-analyst-projects}
      - PM_USER_GROUP=${PM_USER_GROUP:-project-managers}
      - ARCHIE_API_ROOT_URL=${ARCHIE_API_ROOT_URL:-https://archietest.mcri.edu.au}
      - SHOW_MCRI_OBS_COUNTS=${SHOW_MCRI_OBS_COUNTS:-True}
      - MCRI_SEQR_IMPORTS_GCS_BUCKET_NAME=${MCRI_SEQR_IMPORTS_GCS_BUCKET_NAME:-mcri-seqr-imports}
    volumes:
      - ~/.config/gcloud:/root/.config/gcloud
      # - /mnt/disks/seqr_static:/seqr_static_files
    extra_hosts:
      - "keycloak.mcri.edu.au:172.17.0.1"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: bash -c "curl -s 'http://localhost:8000' | grep html"

  pipeline-runner:
    image: ${CONTAINER_REGISTRY:-asia.gcr.io/mcri-01}/${PIPELINE_RUNNER_IMAGE_NAME:-pipeline-runner}:${PIPELINE_RUNNER_IMAGE_TAG:-latest}
    volumes:
      - ~/.config/gcloud:/root/.config/gcloud
