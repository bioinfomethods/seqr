# Generated by Django 4.2.13 on 2024-07-10 19:08

from django.conf import settings
from django.core.paginator import Paginator
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re

SAMPLE_FIELDS = ['last_modified_date', 'tissue_type', 'is_active', 'created_by_id', 'individual_id']

DATA_TYPE_MODELS = {'S': 'RnaSeqSpliceOutlier', 'E': 'RnaSeqOutlier', 'T': 'RnaSeqTpm'}


def create_new_rna_samples(apps, schema_editor):
    Sample = apps.get_model('seqr', 'Sample')
    RnaSample = apps.get_model('seqr', 'RnaSample')
    db_alias = schema_editor.connection.alias

    data_type_sample_ids = [
        (dt, set(apps.get_model('seqr', model).objects.using(db_alias).values_list('sample_id', flat=True).distinct()))
        for dt, model in DATA_TYPE_MODELS.items()
    ]
    data_type_sample_ids = [(dt, sample_ids) for dt, sample_ids in data_type_sample_ids if sample_ids]

    samples = Sample.objects.using(db_alias).filter(sample_type='RNA')
    rna_samples = []
    old_id_to_new_guid = {}
    for sample in samples:
        data_types = [dt for dt, sample_ids in data_type_sample_ids if sample.id in sample_ids]
        if not data_types:
            data_types.append(next(
                dt for dt, dt_name in [('S', 'fraser'), ('E', 'outrider'), ('T', 'tpm')] if dt_name in sample.data_source
            ) if sample.data_source else 'X')

        for data_type in data_types:
            guid = f"R{sample.guid.replace('_', f'_{data_type}_', 1)}"[:30]
            old_id_to_new_guid[(sample.id, data_type)] = guid

            rna_samples.append(RnaSample(
                guid=guid,
                data_type=data_type,
                created_date=sample.loaded_date,
                data_source=sample.data_source or sample.elasticsearch_index,
                **{field: getattr(sample, field) for field in SAMPLE_FIELDS},
            ))

    guid_to_new_id = {}
    if rna_samples:
        rna_sample_models = RnaSample.objects.using(db_alias).bulk_create(rna_samples)
        guid_to_new_id = {s.guid: s.id for s in rna_sample_models}
        print(f'Migrated {len(rna_samples)} RnaSamples')

    for data_type, old_sample_ids in data_type_sample_ids:
        rna_model_name = DATA_TYPE_MODELS[data_type]
        rna_cls = apps.get_model('seqr', rna_model_name)
        print(f'Updating sample foreign keys for {len(old_sample_ids)} {rna_model_name} samples')
        import time
        # TODO need slight performance improvement
        for old_sample_id in old_sample_ids:
            start = time.perf_counter()
            new_sample_id = guid_to_new_id[old_id_to_new_guid[(old_sample_id, data_type)]]
            updated = rna_cls.objects.using(db_alias).filter(sample_id=old_sample_id).update(sample_id=new_sample_id)
            print(f'{time.perf_counter()-start:0.4f}s: Updated {updated} {rna_model_name} sample foreign keys')


def merge_old_new_rna_samples(apps, schema_editor):
    Sample = apps.get_model('seqr', 'Sample')
    RnaSample = apps.get_model('seqr', 'RnaSample')
    db_alias = schema_editor.connection.alias

    rna_samples = []
    old_id_to_guid = {}
    for sample in RnaSample.objects.using(db_alias).all():
        guid = re.sub(r'_[S|E|T|X]_', '_', sample.guid)[1:]
        old_id_to_guid[sample.id] = guid
        rna_samples.append(Sample(
            guid=guid,
            sample_type='RNA',
            dataset_type='SNV_INDEL',
            loaded_date=sample.created_date,
            **{field: getattr(sample, field) for field in [SAMPLE_FIELDS + ['data_source', 'created_date']]},
        ))
    if rna_samples:
        Sample.objects.using(db_alias).bulk_create(rna_samples)
        print(f'Re-created {len(rna_samples)} RNA Samples')

    guid_to_new_id = dict(Sample.objects.using(db_alias).filter(guid__in=old_id_to_guid.values()).values_list('guid', 'id'))
    # TODO cleanup/shared
    for rna_model_name in ['RnaSeqSpliceOutlier', 'RnaSeqOutlier', 'RnaSeqTpm']:
        rna_cls = apps.get_model('seqr', rna_model_name)
        rna_data_models = rna_cls.objects.using(db_alias).all()
        for rna_data in rna_data_models:
            rna_data.sample_id = guid_to_new_id[old_id_to_guid[rna_data.sample_id]]
        if rna_data_models:
            print(f'Updating sample foreign key for {len(rna_data_models)} {rna_model_name} records')
            rna_cls.objects.using(db_alias).bulk_update(rna_data_models, ['sample_id'], batch_size=1000)


def remove_old_rna_samples(apps, schema_editor):
    Sample = apps.get_model('seqr', 'Sample')
    db_alias = schema_editor.connection.alias
    Sample.objects.using(db_alias).filter(sample_type='RNA').delete()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('seqr', '0068_project_vlm_contact_email'),
    ]

    operations = [
        migrations.CreateModel(
            name='RnaSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guid', models.CharField(db_index=True, max_length=30, unique=True)),
                ('created_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('last_modified_date', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('data_type', models.CharField(choices=[('T', 'TPM'), ('E', 'Expression Outlier'), ('S', 'Splice Outlier')], max_length=1)),
                ('tissue_type', models.CharField(choices=[('WB', 'whole_blood'), ('F', 'fibroblasts'), ('M', 'muscle'), ('L', 'lymphocytes'), ('A', 'airway_cultured_epithelium')], max_length=2)),
                ('data_source', models.TextField()),
                ('is_active', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('individual', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='seqr.individual')),
            ],
        ),
        migrations.RunPython(create_new_rna_samples, reverse_code=merge_old_new_rna_samples),
        migrations.AlterField(
            model_name='rnaseqoutlier',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqr.rnasample'),
        ),
        migrations.AlterField(
            model_name='rnaseqspliceoutlier',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqr.rnasample'),
        ),
        migrations.AlterField(
            model_name='rnaseqtpm',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqr.rnasample'),
        ),
        migrations.RunPython(remove_old_rna_samples, reverse_code=migrations.RunPython.noop),
        migrations.RemoveField(
            model_name='sample',
            name='tissue_type',
        ),
        migrations.AlterField(
            model_name='sample',
            name='sample_type',
            field=models.CharField(choices=[('WES', 'Exome'), ('WGS', 'Whole Genome')], max_length=10),
        ),
    ]
